// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã Doodle Jump
console.log('üîß Loading DoodleJumpGame class...');

class DoodleJumpGame {
    constructor() {
        console.log('üéÆ Initializing DoodleJumpGame...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.canvas = document.getElementById('gameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.assets = new AssetManager();
        this.platformManager = new PlatformManager();
        this.player = new Player();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.state = GameState.MENU;
        this.score = 0;
        this.highScore = parseInt(localStorage.getItem('doodleHighScore')) || 0;
        this.distance = 0;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å–∞–Ω–∏—è–º–∏
        this.isTouching = false;
        this.touchId = null;
        
        // –í—Ä–µ–º—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è
        this.animationId = null;
        this.lastTime = 0;
        this.deltaTime = 0;
        this.currentTime = 0;
        this.frameCount = 0;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.stats = {
            totalFrames: 0,
            collisionHistory: [],
            jumpSequence: [],
            gameStartTime: 0
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    async init() {
        console.log('üöÄ Starting game initialization...');
        
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await this.assets.loadAllAssets();
            console.log('‚úÖ Assets loaded successfully');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.setupControls();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.setupUI();
            
            // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            this.gameLoop();
            
            console.log('üéâ Game initialized successfully!');
            
        } catch (error) {
            console.error('‚ùå Error during game initialization:', error);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setupControls() {
        console.log('üéõÔ∏è Setting up controls...');
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
        document.addEventListener('keydown', (e) => {
            this.handleKeyDown(e);
        });
        
        document.addEventListener('keyup', (e) => {
            this.handleKeyUp(e);
        });
        
        // –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –û–°–ù–û–í–ù–û–ï
        this.setupTouchControls();
        
        // –ì–∏—Ä–æ—Å–∫–æ–ø (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        this.setupGyroControls();
        
        // –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.setupButtonHandlers();
        
        console.log('‚úÖ Controls setup complete');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
    handleKeyDown(e) {
        switch(e.code) {
            case 'ArrowLeft':
                this.player.setInput('left', true);
                break;
            case 'ArrowRight':
                this.player.setInput('right', true);
                break;
            case 'Space':
                if (this.state === GameState.MENU) {
                    this.startGame();
                }
                break;
            case 'Escape':
                if (this.state === GameState.PLAYING) {
                    this.pauseGame();
                }
                break;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
    handleKeyUp(e) {
        switch(e.code) {
            case 'ArrowLeft':
                this.player.setInput('left', false);
                break;
            case 'ArrowRight':
                this.player.setInput('right', false);
                break;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setupTouchControls() {
        this.canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (this.state === GameState.PLAYING && e.touches.length > 0) {
                this.isTouching = true;
                this.touchId = e.touches[0].identifier;
                this.handleTouch(e.touches[0]);
            }
        });
        
        this.canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (this.state === GameState.PLAYING && this.isTouching) {
                for (let touch of e.touches) {
                    if (touch.identifier === this.touchId) {
                        this.handleTouch(touch);
                        break;
                    }
                }
            }
        });
        
        this.canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            if (this.state === GameState.PLAYING) {
                this.isTouching = false;
                this.touchId = null;
                this.player.clearTargetPosition();
            }
        });
        
        this.canvas.addEventListener('touchcancel', (e) => {
            e.preventDefault();
            if (this.state === GameState.PLAYING) {
                this.isTouching = false;
                this.touchId = null;
                this.player.clearTargetPosition();
            }
        });
        
        this.canvas.addEventListener('click', (e) => {
            if (this.state === GameState.MENU) {
                this.startGame();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏—è
    handleTouch(touch) {
        const canvasRect = this.canvas.getBoundingClientRect();
        const touchX = touch.clientX - canvasRect.left;
        
        const clampedX = Math.max(0, Math.min(touchX, this.canvas.width));
        this.player.setTargetPosition(clampedX);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏—Ä–æ—Å–∫–æ–ø–∞
    setupGyroControls() {
        if (window.DeviceOrientationEvent) {
            window.addEventListener('deviceorientation', (e) => {
                if (this.state === GameState.PLAYING && !this.isTouching) {
                    this.player.handleDeviceTilt(e.gamma);
                }
            });
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
    setupButtonHandlers() {
        document.getElementById('startButton').addEventListener('click', () => this.startGame());
        document.getElementById('restartButton').addEventListener('click', () => this.restartGame());
        document.getElementById('shareButton').addEventListener('click', () => this.shareScore());
        
        document.getElementById('startButton').addEventListener('touchend', (e) => {
            e.preventDefault();
            this.startGame();
        });
        
        document.getElementById('restartButton').addEventListener('touchend', (e) => {
            e.preventDefault();
            this.restartGame();
        });
        
        document.getElementById('shareButton').addEventListener('touchend', (e) => {
            e.preventDefault();
            this.shareScore();
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
    setupUI() {
        this.updateHighScoreDisplay();
        this.addMobileInstructions();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    addMobileInstructions() {
        const controlsInfo = document.querySelector('.controls');
        if (controlsInfo) {
            controlsInfo.innerHTML = '<p><strong>Controls:</strong><br>Touch and drag to move</p>';
        }
    }

    // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    startGame() {
        console.log('üéÆ Starting new game...');
        
        this.state = GameState.PLAYING;
        this.score = 0;
        this.distance = 0;
        this.player.reset();
        this.platformManager.reset();
        this.isTouching = false;
        this.touchId = null;
        
        // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.stats.gameStartTime = Date.now();
        this.stats.collisionHistory = [];
        this.stats.jumpSequence = [];
        this.frameCount = 0;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        document.getElementById('startScreen').style.display = 'none';
        document.getElementById('gameOverScreen').style.display = 'none';
        
        this.updateScoreDisplay();
        console.log('‚úÖ Game started!');
    }

    // –†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
    restartGame() {
        console.log('üîÑ Restarting game...');
        this.startGame();
    }

    // –ü–∞—É–∑–∞ –∏–≥—Ä—ã
    pauseGame() {
        if (this.state === GameState.PLAYING) {
            this.state = GameState.PAUSED;
        } else if (this.state === GameState.PAUSED) {
            this.state = GameState.PLAYING;
        }
    }

    // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
    gameOver() {
        console.log('üíÄ Game Over!', {
            score: Math.floor(this.score),
            distance: Math.floor(this.distance),
            totalJumps: this.player.stats.totalJumps,
            playTime: Date.now() - this.stats.gameStartTime
        });
        
        this.state = GameState.GAME_OVER;
        this.isTouching = false;
        this.touchId = null;
        this.player.clearTargetPosition();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
        if (this.score > this.highScore) {
            this.highScore = this.score;
            localStorage.setItem('doodleHighScore', this.highScore);
        }
        
        // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ Game Over
        document.getElementById('finalScore').textContent = Math.floor(this.score);
        document.getElementById('gameOverHighScore').textContent = `Best: ${Math.floor(this.highScore)}`;
        document.getElementById('gameOverScreen').style.display = 'block';
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Telegram
        this.sendTelegramScore();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –≤ Telegram
    sendTelegramScore() {
        if (window.tg && typeof window.tg.sendData === 'function') {
            try {
                window.tg.sendData(JSON.stringify({
                    action: 'gameOver',
                    score: Math.floor(this.score),
                    highScore: Math.floor(this.highScore),
                    timestamp: Date.now()
                }));
            } catch (error) {
                console.log('Could not send score to Telegram:', error);
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞
    updateScoreDisplay() {
        const scoreDisplay = document.getElementById('scoreDisplay');
        if (scoreDisplay) {
            scoreDisplay.textContent = `Score: ${Math.floor(this.score)} | Best: ${Math.floor(this.highScore)}`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞
    updateHighScoreDisplay() {
        const menuHighScore = document.getElementById('menuHighScore');
        if (menuHighScore) {
            menuHighScore.textContent = `Best: ${Math.floor(this.highScore)}`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    update(currentTime) {
        this.currentTime = currentTime;
        this.frameCount++;
        this.stats.totalFrames++;
        
        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
        if (this.lastTime === 0) this.lastTime = currentTime;
        this.deltaTime = (currentTime - this.lastTime) / 1000;
        this.lastTime = currentTime;
        
        if (this.state !== GameState.PLAYING) return;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const previousVelocityY = this.player.velocityY;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        const playerAlive = this.player.update(this.deltaTime);
        if (!playerAlive) {
            this.gameOver();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        const collisionOccurred = this.platformManager.checkCollisions(this.player, currentTime);
        if (collisionOccurred) {
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–ª–∏–∑–∏–π
            this.stats.collisionHistory.push({
                time: currentTime,
                frame: this.frameCount,
                velocityBefore: previousVelocityY,
                velocityAfter: this.player.velocityY
            });
            
            // –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–ª–ª–∏–∑–∏–π
            if (this.stats.collisionHistory.length > 10) {
                this.stats.collisionHistory.shift();
            }
            
            if (window.LOG_COLLISION) {
                console.log('üîÑ Processing platform collision...', {
                    frame: this.frameCount,
                    velocityBefore: previousVelocityY.toFixed(2),
                    velocityAfter: this.player.velocityY.toFixed(2),
                    delta: (this.player.velocityY - previousVelocityY).toFixed(2)
                });
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            this.player.onPlatformHit();
            
            // –í–†–£–ß–ù–£–Æ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä—ã–∂–æ–∫ –∑–¥–µ—Å—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            const jumpResult = this.player.jump();
            
            if (window.LOG_JUMP && jumpResult) {
                console.log('üéØ Collision jump executed', {
                    velocityY: this.player.velocityY,
                    expected: CONFIG.PLAYER.JUMP_FORCE,
                    match: this.player.velocityY === CONFIG.PLAYER.JUMP_FORCE
                });
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∫–æ–≤
        const scrollAmount = this.platformManager.update(this.player.y, this.deltaTime);
        if (scrollAmount > 0) {
            this.distance += scrollAmount;
            this.score += scrollAmount * CONFIG.GAME.SCORE_MULTIPLIER;
            this.updateScoreDisplay();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ debug –ø–∞–Ω–µ–ª–∏
        if (window.DEBUG_MODE) {
            this.updateDebugPanel();
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–Ω–æ–º–∞–ª–∏–π
        this.monitorAnomalies();
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–Ω–æ–º–∞–ª–∏–π
    monitorAnomalies() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        if (Math.abs(this.player.velocityY) > 15) {
            console.error('üö® VELOCITY ANOMALY DETECTED!', {
                velocityY: this.player.velocityY,
                frame: this.frameCount,
                jumpCount: this.player.jumpCount,
                recentJumps: this.player.stats.jumpHistory.slice(-3)
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä—ã–∂–∫–∏ –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π
        const recentJumps = this.player.stats.jumpHistory.slice(-2);
        if (recentJumps.length === 2) {
            const timeBetweenJumps = recentJumps[1].time - recentJumps[0].time;
            if (timeBetweenJumps < 100) { // –ú–µ–Ω—å—à–µ 100 –º—Å –º–µ–∂–¥—É –ø—Ä—ã–∂–∫–∞–º–∏
                console.warn('‚ö†Ô∏è RAPID SUCCESSIVE JUMPS!', {
                    timeBetween: timeBetweenJumps + 'ms',
                    jumps: recentJumps
                });
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ debug –ø–∞–Ω–µ–ª–∏
    updateDebugPanel() {
        const debugPanel = document.getElementById('debugPanel');
        if (!debugPanel) return;
        
        const playerInfo = this.player.getDebugInfo();
        const platformInfo = this.platformManager.getDebugInfo();
        
        debugPanel.innerHTML = `
            <div>Frame: ${this.frameCount}</div>
            <div>State: ${this.state}</div>
            <div>Pos: ${playerInfo.position.x}, ${playerInfo.position.y}</div>
            <div>Vel: ${playerInfo.velocity.y}</div>
            <div>Jumps: ${playerInfo.stats.totalJumps}</div>
            <div>Platforms: ${platformInfo.totalPlatforms}</div>
            <div>Score: ${Math.floor(this.score)}</div>
        `;
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
    draw() {
        // –û—á–∏—Å—Ç–∫–∞ canvas
        this.clearCanvas();
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞
        this.drawBackground();
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.platformManager.draw(this.ctx, this.assets);
        this.player.draw(this.ctx, this.assets);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI –ø–æ–≤–µ—Ä—Ö –∏–≥—Ä—ã
        this.drawUI();
    }

    // –û—á–∏—Å—Ç–∫–∞ canvas
    clearCanvas() {
        const background = this.assets.getImage('background');
        
        if (background && background.complete && background.naturalWidth !== 0) {
            this.ctx.drawImage(background, 0, 0, this.canvas.width, this.canvas.height);
        } else {
            const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
            gradient.addColorStop(0, CONFIG.COLORS.BACKGROUND_TOP);
            gradient.addColorStop(1, CONFIG.COLORS.BACKGROUND_BOTTOM);
            this.ctx.fillStyle = gradient;
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞
    drawBackground() {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–ª–ª–∞–∫—Å-—ç—Ñ—Ñ–µ–∫—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–Ω–∞
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ UI
    drawUI() {
        // –û—Å–Ω–æ–≤–Ω–æ–π UI —É–∂–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è HTML-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    gameLoop(currentTime = 0) {
        this.update(currentTime);
        this.draw();
        this.animationId = requestAnimationFrame((time) => this.gameLoop(time));
    }

    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    shareScore() {
        const shareText = `üéØ I scored ${Math.floor(this.score)} points in Doodle Jump! Can you beat my score?`;
        
        if (navigator.share) {
            navigator.share({
                title: 'Doodle Jump',
                text: shareText,
                url: window.location.href
            }).catch(error => {
                console.log('Share cancelled:', error);
                this.copyToClipboard(shareText);
            });
        } else if (window.tg && typeof window.tg.shareUrl === 'function') {
            window.tg.shareUrl(window.location.href, shareText);
        } else {
            this.copyToClipboard(shareText);
        }
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            alert('Score copied to clipboard! üìã');
        } catch (error) {
            console.log('Clipboard copy failed:', error);
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('Score copied to clipboard! üìã');
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
    destroy() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    getDebugStats() {
        return {
            game: {
                state: this.state,
                score: this.score,
                distance: this.distance,
                frameCount: this.frameCount
            },
            player: this.player.getDebugInfo(),
            platforms: this.platformManager.getDebugInfo(),
            collisions: this.stats.collisionHistory.length,
            recentCollisions: this.stats.collisionHistory.slice(-3)
        };
    }
}

console.log('‚úÖ DoodleJumpGame class defined');