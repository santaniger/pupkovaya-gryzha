// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã Doodle Jump - –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï
console.log('üîß Loading DoodleJumpGame class...');

class DoodleJumpGame {
    constructor() {
        console.log('üéÆ Initializing DoodleJumpGame...');
        
        // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
        window.DEBUG_MODE = false;
        window.LOG_PLATFORMS = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        console.log('üì± Mobile device:', this.isMobile);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.canvas = document.getElementById('gameCanvas');
        if (!this.canvas) {
            console.error('‚ùå Canvas element not found!');
            this.showFatalError('Game canvas not found');
            return;
        }
        
        try {
            this.ctx = this.canvas.getContext('2d');
            this.assets = new AssetManager();
            this.platformManager = new PlatformManager();
            this.player = new Player();
        } catch (error) {
            console.error('‚ùå Error initializing game components:', error);
            this.showFatalError('Failed to initialize game: ' + error.message);
            return;
        }
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.state = 'loading';
        this.score = 0;
        this.highScore = parseInt(localStorage.getItem('doodleHighScore')) || 0;
        
        // –°–∏—Å—Ç–µ–º–∞ –∫–∞–º–µ—Ä—ã
        this.cameraY = 0;
        this.cameraOffset = 200;
        
        // –°–∏—Å—Ç–µ–º–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        this.difficultyLevel = 1;
        this.lastDifficultyUpdate = 0;
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å–∞–Ω–∏—è–º–∏
        this.isTouching = false;
        this.touchStartX = 0;
        this.lastTouchX = 0;
        
        // –í—Ä–µ–º—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è
        this.animationId = null;
        this.lastTime = 0;
        this.deltaTime = 0;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    async init() {
        console.log('üöÄ Starting game initialization...');
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            this.updateLoadingText('–°–ø—Ä–∞–π—Ç—ã –≥—Ä—É–∂—É...');
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await this.assets.loadAllAssets();
            console.log('‚úÖ Assets loaded successfully');
            
            this.updateLoadingText('–ê–≤—Ç–æ–ø—Ä—ã–∂–æ–∫ —Ç–∞–º...');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.setupControls();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.setupUI();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.validateInitialState();
            
            this.updateLoadingText('–©–∞...');
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
            this.state = 'menu';
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É
            setTimeout(() => {
                this.showScreen('startScreen');
                console.log('üéâ Game initialized successfully!');
                
                // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                console.log('üìä Initial game state:', this.getDebugInfo());
            }, 500);
            
            // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            this.gameLoop();
            
        } catch (error) {
            console.error('‚ùå Error during game initialization:', error);
            this.showFatalError('Failed to initialize game: ' + error.message);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    validateInitialState() {
        console.log('üîç Validating initial game state...');
        
        const startPlatform = this.platformManager.getStartPlatform();
        if (!startPlatform) {
            console.error('‚ùå No start platform found!');
            this.platformManager.generateInitialPlatforms();
            return false;
        }
        
        console.log('‚úÖ Start platform found:', {
            x: startPlatform.x,
            y: startPlatform.y,
            type: startPlatform.type
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        console.log('‚úÖ Player position:', {
            x: this.player.x,
            y: this.player.y,
            width: this.player.width,
            height: this.player.height
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–¥ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
        const playerOnPlatform = 
            this.player.y + this.player.height <= startPlatform.y + startPlatform.height &&
            this.player.y + this.player.height >= startPlatform.y;
            
        console.log(`‚úÖ Player on platform: ${playerOnPlatform}`);
        
        if (!playerOnPlatform) {
            console.warn('‚ö†Ô∏è Adjusting player position to be on start platform');
            this.player.y = startPlatform.y - this.player.height;
        }
        
        return true;
    }

    updateLoadingText(text) {
        const loadingText = document.getElementById('loadingText');
        if (loadingText) {
            loadingText.textContent = text;
        }
    }

    setupControls() {
        console.log('üéõÔ∏è Setting up controls...');
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
        if (!this.isMobile) {
            document.addEventListener('keydown', (e) => {
                this.handleKeyDown(e);
            });
            
            document.addEventListener('keyup', (e) => {
                this.handleKeyUp(e);
            });
        }
        
        // –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        this.setupTouchControls();
        
        // –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.setupButtonHandlers();
    }

    setupTouchControls() {
        // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        this.canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (this.state === 'playing') {
                this.isTouching = true;
                const touch = e.touches[0];
                this.touchStartX = touch.clientX;
                this.lastTouchX = touch.clientX;
                this.handleTouch(touch);
            }
        }, { passive: false });
        
        this.canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (this.state === 'playing' && this.isTouching) {
                const touch = e.touches[0];
                this.handleTouch(touch);
            }
        }, { passive: false });
        
        this.canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            this.isTouching = false;
            this.player.clearTargetPosition();
        }, { passive: false });
        
        this.canvas.addEventListener('touchcancel', (e) => {
            e.preventDefault();
            this.isTouching = false;
            this.player.clearTargetPosition();
        }, { passive: false });
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï - —Ç–æ—á–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–∞–ª—å—Ü–µ–º
    handleTouch(touch) {
        const canvasRect = this.canvas.getBoundingClientRect();
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞—Å–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
        const touchX = touch.clientX - canvasRect.left;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö canvas
        const clampedX = Math.max(0, Math.min(touchX, this.canvas.width));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥ –ø–∞–ª—å—Ü–µ–º)
        this.player.setExactPosition(clampedX);
        
        this.lastTouchX = touch.clientX;
    }

    handleKeyDown(e) {
        switch(e.code) {
            case 'ArrowLeft':
                this.player.setInput('left', true);
                break;
            case 'ArrowRight':
                this.player.setInput('right', true);
                break;
            case 'Space':
            case 'Enter':
                if (this.state === 'menu') {
                    this.startGame();
                }
                break;
        }
    }

    handleKeyUp(e) {
        switch(e.code) {
            case 'ArrowLeft':
                this.player.setInput('left', false);
                break;
            case 'ArrowRight':
                this.player.setInput('right', false);
                break;
        }
    }

    setupButtonHandlers() {
        const startButton = document.getElementById('startButton');
        const restartButton = document.getElementById('restartButton');
        const shareButton = document.getElementById('shareButton');
        const victoryRestartButton = document.getElementById('victoryRestartButton');
        const victoryShareButton = document.getElementById('victoryShareButton');
        
        if (startButton) {
            startButton.addEventListener('click', () => this.startGame());
            startButton.addEventListener('touchend', (e) => {
                e.preventDefault();
                this.startGame();
            });
        }
        
        if (restartButton) {
            restartButton.addEventListener('click', () => this.restartGame());
            restartButton.addEventListener('touchend', (e) => {
                e.preventDefault();
                this.restartGame();
            });
        }
        
        if (shareButton) {
            shareButton.addEventListener('click', () => this.shareScore());
            shareButton.addEventListener('touchend', (e) => {
                e.preventDefault();
                this.shareScore();
            });
        }
        
        // –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –≠–ö–†–ê–ù–ê –ü–û–ë–ï–î–´
        if (victoryRestartButton) {
            victoryRestartButton.addEventListener('click', () => this.restartGame());
            victoryRestartButton.addEventListener('touchend', (e) => {
                e.preventDefault();
                this.restartGame();
            });
        }
        
        if (victoryShareButton) {
            victoryShareButton.addEventListener('click', () => this.shareVictory());
            victoryShareButton.addEventListener('touchend', (e) => {
                e.preventDefault();
                this.shareVictory();
            });
        }
    }

    setupUI() {
        this.updateHighScoreDisplay();
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –≠–ö–†–ê–ù–ê–ú–ò
    showScreen(screenId) {
        console.log(`üñ•Ô∏è Showing screen: ${screenId}`);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        const screens = ['loadingScreen', 'startScreen', 'gameOverScreen', 'victoryScreen'];
        screens.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.style.display = 'none';
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.style.display = 'flex';
        } else {
            console.error(`‚ùå Screen not found: ${screenId}`);
        }
    }

    startGame() {
        console.log('üéÆ Starting new game...');
        
        this.state = 'playing';
        this.score = 0;
        this.cameraY = 0;
        this.victoryAchieved = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–±–µ–¥—ã
        
        // –°–±—Ä–æ—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.player.reset();
        this.platformManager.reset();
        this.isTouching = false;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–≤—ã–π –ø—Ä—ã–∂–æ–∫
        setTimeout(() => {
            this.player.jump();
            console.log('ü¶ò Auto jump at game start');
        }, 100);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.hideAllScreens();
        
        this.updateScoreDisplay();
    }

    restartGame() {
        console.log('üîÑ Restarting game...');
        this.startGame();
    }

    shareVictory() {
        const shareText = `üéâ I reached ${Math.floor(this.score)} points and completed Doodle Jump! Can you beat my score?`;
        
        if (navigator.share) {
            navigator.share({
                title: 'Doodle Jump Victory!',
                text: shareText,
                url: window.location.href
            }).catch(error => {
                console.log('Share cancelled:', error);
                this.copyToClipboard(shareText);
            });
        } else if (window.tg && typeof window.tg.shareUrl === 'function') {
            window.tg.shareUrl(window.location.href, shareText);
        } else {
            this.copyToClipboard(shareText);
        }
    }

    gameOver() {
        console.log('üíÄ Game Over!');
        
        this.state = 'game_over';
        this.isTouching = false;
        this.player.clearTargetPosition();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
        if (this.score > this.highScore) {
            this.highScore = this.score;
            localStorage.setItem('doodleHighScore', this.highScore);
        }
        
        // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ Game Over —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        document.getElementById('finalScore').textContent = `–î–æ—Ä–æ—Å –¥–æ –ó–ü:\n${Math.floor(this.score)} –∫/–Ω–∞–Ω–æ—Å–µ–∫`;
        document.getElementById('gameOverHighScore').textContent = `–†–µ–∫–æ—Ä–¥–Ω–∞—è –ø—Ä–µ–º–∏—è:\n${Math.floor(this.highScore)} –∫/–Ω–∞–Ω–æ—Å–µ–∫`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.showGameOverImage();
        
        this.showScreen('gameOverScreen');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –≤ Telegram
        this.sendTelegramScore();
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    showGameOverImage() {
        const gameOverImage = document.getElementById('gameOverImage');
        if (gameOverImage) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–Ω–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º src)
            gameOverImage.style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            gameOverImage.onerror = () => {
                console.warn('‚ö†Ô∏è Game over PNG failed to load, hiding image');
                gameOverImage.style.display = 'none';
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (!gameOverImage.complete || gameOverImage.naturalHeight === 0) {
                console.log('üîÑ Game over image still loading...');
                gameOverImage.onload = () => {
                    console.log('‚úÖ Game over PNG loaded successfully');
                };
            }
        }
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Game Over
    setGameOverImage() {
        const gameOverImage = document.getElementById('gameOverImage');
        const gameOverCanvas = this.assets.getImage('gameOver');
        
        if (gameOverImage && gameOverCanvas) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ data URL –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ src
            gameOverImage.src = gameOverCanvas.toDataURL();
        } else {
            console.warn('‚ö†Ô∏è Game over image not found, using fallback');
            // Fallback - —Å–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç
            if (gameOverImage) {
                gameOverImage.style.display = 'none';
            }
        }
    }

    hideAllScreens() {
        const screens = ['loadingScreen', 'startScreen', 'gameOverScreen', 'victoryScreen'];
        screens.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.style.display = 'none';
            }
        });
    }

    updateCamera() {
        // –ö–∞–º–µ—Ä–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–æ–º, –∫–æ–≥–¥–∞ –æ–Ω –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
        if (this.player.y < this.cameraY + this.cameraOffset) {
            this.cameraY = this.player.y - this.cameraOffset;
        }
        
        // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∫–∞–º–µ—Ä–µ —É—Ö–æ–¥–∏—Ç—å –Ω–∏–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        this.cameraY = Math.min(this.cameraY, 0);
        
        if (window.DEBUG_MODE) {
            console.log(`üì∑ Camera: ${Math.round(this.cameraY)}, Player: ${Math.round(this.player.y)}`);
        }
    }

    update(currentTime) {
        
        if (this.lastTime === 0) this.lastTime = currentTime;
        this.deltaTime = (currentTime - this.lastTime) / 1000;
        this.lastTime = currentTime;
        
        if (this.state !== 'playing') return;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        const playerAlive = this.player.update(this.deltaTime);
        if (!playerAlive) {
            this.gameOver();
            return;
        }

        if (this.lastTime === 0) this.lastTime = currentTime;
        this.deltaTime = (currentTime - this.lastTime) / 1000;
        this.lastTime = currentTime;
        
        if (this.state !== 'playing') return;
        
        // –ü–†–û–í–ï–†–ö–ê –ü–û–ë–ï–î–´
        if (!this.victoryAchieved && this.score >= this.victoryScore) {
            this.victory();
            return;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        this.updateCamera();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        const collisionOccurred = this.platformManager.checkCollisions(this.player, currentTime);
        if (collisionOccurred) {
            this.player.onPlatformHit();
            this.player.jump();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º - –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        this.platformManager.update(this.player.y, this.deltaTime);
        const highestPlatform = this.platformManager.getHighestPlatform();
        if (highestPlatform && this.player.y < highestPlatform.y + 300) {
            console.log('üö® Player close to top - forcing platform generation');
            this.platformManager.generateInfinitePlatforms(this.player.y);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        const heightScore = Math.max(0, -this.player.y);
        this.score = Math.max(this.score, heightScore);
        
        this.updateScoreDisplay();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        if (window.DEBUG_MODE && currentTime % 2000 < 16) {
            console.log('üìä Game state:', this.getDebugInfo());
            const platformInfo = this.platformManager.getDebugInfo();
            console.log('üìà Platform distribution:', platformInfo.distribution);
        }
    }
    
    sendTelegramVictory() {
        if (window.tg && typeof window.tg.sendData === 'function') {
            try {
                window.tg.sendData(JSON.stringify({
                    action: 'victory',
                    score: Math.floor(this.score),
                    highScore: Math.floor(this.highScore),
                    victoryScore: this.victoryScore,
                    timestamp: Date.now()
                }));
            } catch (error) {
                console.log('Could not send victory to Telegram:', error);
            }
        }
    }

    victory() {
        console.log('üéâ Victory achieved! Score:', Math.floor(this.score));
        
        this.victoryAchieved = true;
        this.state = 'victory';
        this.isTouching = false;
        this.player.clearTargetPosition();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–∞
        const isNewHighScore = this.score > this.highScore;
        if (isNewHighScore) {
            this.highScore = this.score;
            localStorage.setItem('doodleHighScore', this.highScore);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥—ã
        document.getElementById('victoryScore').textContent = `Final Score: ${Math.floor(this.score)}`;
        document.getElementById('victoryHighScore').textContent = 
            isNewHighScore ? `New Best: ${Math.floor(this.highScore)}` : `Best: ${Math.floor(this.highScore)}`;
        
        this.showScreen('victoryScreen');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–±–µ–¥—ã –≤ Telegram
        this.sendTelegramVictory();
    }

    updateDifficulty() {
        const difficultyThreshold = 500; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 500 –æ—á–∫–æ–≤
        const newDifficulty = Math.floor(this.score / difficultyThreshold) + 1;
        
        if (newDifficulty > this.difficultyLevel) {
            this.difficultyLevel = newDifficulty;
            console.log(`üéØ Difficulty increased to level ${this.difficultyLevel}`);
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å
            // –ù–∞–ø—Ä–∏–º–µ—Ä: —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º, —É–º–µ–Ω—å—à–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –∏ —Ç.–¥.
        }
    }

    draw() {
        try {
            // –û—á–∏—Å—Ç–∫–∞ canvas
            this.clearCanvas();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –∫–∞–º–µ—Ä—ã
            this.ctx.save();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
            this.ctx.translate(0, -this.cameraY);
            
            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–∞–º–µ—Ä—ã
            this.platformManager.draw(this.ctx, this.assets);
            this.player.draw(this.ctx, this.assets);
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Ö–æ–ª—Å—Ç–µ
            if (window.DEBUG_MODE) {
                this.drawDebugInfo();
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            this.ctx.restore();
            
        } catch (error) {
            console.error('‚ùå Error in game draw:', error);
        }
    }

    drawDebugInfo() {
        this.ctx.fillStyle = 'white';
        this.ctx.font = '12px Arial';
        
        this.ctx.fillText(`Player: ${Math.round(this.player.x)}, ${Math.round(this.player.y)}`, 10, 20);
        this.ctx.fillText(`Velocity: ${this.player.velocityY.toFixed(1)}`, 10, 40);
        this.ctx.fillText(`Camera: ${Math.round(this.cameraY)}`, 10, 60);
        this.ctx.fillText(`Score: ${Math.round(this.score)}`, 10, 80);
        
        const platformInfo = this.platformManager.getDebugInfo();
        this.ctx.fillText(`Platforms: ${platformInfo.totalPlatforms}`, 10, 100);
        this.ctx.fillText(`Highest: ${platformInfo.highestPlatformY}`, 10, 120);
    }

    getDebugInfo() {
        const platformInfo = this.platformManager.getDebugInfo();
        
        return {
            game: {
                state: this.state,
                score: Math.round(this.score),
                cameraY: Math.round(this.cameraY),
                difficulty: this.difficultyLevel
            },
            player: this.player.getDebugInfo(),
            platforms: platformInfo
        };
    }

    clearCanvas() {
        const background = this.assets.getImage('background');
        
        if (background) {
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ–Ω –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (—Ñ–æ–Ω —Å—Ç–∞—Ç–∏—á–Ω—ã–π)
            this.ctx.drawImage(background, 0, 0, this.canvas.width, this.canvas.height);
        } else {
            const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
            gradient.addColorStop(0, '#87CEEB');
            gradient.addColorStop(1, '#E0F7FA');
            this.ctx.fillStyle = gradient;
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
    }

    gameLoop(currentTime = 0) {
        this.update(currentTime);
        this.draw();
        this.animationId = requestAnimationFrame((time) => this.gameLoop(time));
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –≤ Telegram
    sendTelegramScore() {
        if (window.tg && typeof window.tg.sendData === 'function') {
            try {
                window.tg.sendData(JSON.stringify({
                    action: 'gameOver',
                    score: Math.floor(this.score),
                    highScore: Math.floor(this.highScore),
                    timestamp: Date.now()
                }));
            } catch (error) {
                console.log('Could not send score to Telegram:', error);
            }
        }
    }

    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    shareScore() {
        const shareText = `üéØ –Ø –ø–æ–ª—É—á–∏–ª –æ—Ñ—Ñ–µ—Ä –Ω–∞ ${Math.floor(this.score)} –∫/–Ω–∞–Ω–æ—Å–µ–∫ –≤ –ì—Ä—ã–∂–∞ Jump! –†–∞–¥ –∑–∞ –º–µ–Ω—è?`;
        
        if (navigator.share) {
            navigator.share({
                title: 'Doodle Jump',
                text: shareText,
                url: window.location.href
            }).catch(error => {
                console.log('Share cancelled:', error);
                this.copyToClipboard(shareText);
            });
        } else if (window.tg && typeof window.tg.shareUrl === 'function') {
            window.tg.shareUrl(window.location.href, shareText);
        } else {
            this.copyToClipboard(shareText);
        }
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            alert('–ù—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª, –∞ –∫—É–¥–∞ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ?) üìã');
        } catch (error) {
            console.log('Clipboard copy failed:', error);
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('–ù—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª, –∞ –∫—É–¥–∞ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ?) üìã');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞
    updateScoreDisplay() {
        const scoreDisplay = document.getElementById('scoreDisplay');
        if (scoreDisplay) {
            scoreDisplay.textContent = `–ó–ü: ${Math.floor(this.score)} | –†–µ–∫–æ—Ä–¥: ${Math.floor(this.highScore)}`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞
    updateHighScoreDisplay() {
        const menuHighScore = document.getElementById('menuHighScore');
        if (menuHighScore) {
            menuHighScore.textContent = `–†–µ–∫–æ—Ä–¥: ${Math.floor(this.highScore)}`;
        }
    }

    showFatalError(message) {
        const loadingScreen = document.getElementById('loadingScreen');
        const loadingText = document.getElementById('loadingText');
        
        if (loadingScreen && loadingText) {
            loadingText.textContent = message;
            loadingText.style.color = '#e74c3c';
            loadingText.style.fontSize = '16px';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            const reloadButton = document.createElement('button');
            reloadButton.textContent = 'Reload Game';
            reloadButton.className = 'button';
            reloadButton.style.marginTop = '20px';
            reloadButton.onclick = () => window.location.reload();
            
            loadingScreen.appendChild(reloadButton);
        }
    }
}

window.DoodleJumpGame = DoodleJumpGame;
console.log('‚úÖ DoodleJumpGame class defined');