// player.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ó–ê–©–ò–¢–û–ô –û–¢ –ü–û–†–Ø–î–ö–ê –ó–ê–ì–†–£–ó–ö–ò
console.log('üîß Loading Player class...');

class Player {
    constructor() {
        console.log('üéÆ Creating new Player instance');
        
        this.stats = {
            totalJumps: 0,
            jumpHistory: [],
            velocityHistory: [],
            lastCollisionTime: 0,
            consecutiveJumps: 0
        };
        
        this.reset();
        this.input = {
            left: false,
            right: false
        };
        this.lastDirection = 'right';
        this.targetX = null;
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ - –° –ó–ê–©–ò–¢–û–ô –û–¢ –û–¢–°–£–¢–°–¢–í–ò–Ø CONFIG
    reset() {
        console.log('üîÑ Resetting player state');
        
        // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CONFIG
        if (typeof CONFIG === 'undefined') {
            console.error('‚ùå CONFIG not available during player reset!');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.width = 40;
            this.height = 40;
            this.x = 180 - 20; // canvas.width / 2 - width / 2
            this.y = 450; // canvas.height - 150
        } else {
            this.width = CONFIG.PLAYER.WIDTH;
            this.height = CONFIG.PLAYER.HEIGHT;
            this.x = CONFIG.CANVAS.WIDTH / 2 - this.width / 2;
            this.y = CONFIG.PLAYER.START_Y;
        }
        
        this.velocityX = 0;
        this.velocityY = 0;
        this.isJumping = false;
        this.jumpCount = 0;
        this.maxJumps = 1;
        this.targetX = this.x;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä—ã–∂–∫–∞
        this.lastJumpTime = 0;
        this.canJump = true;
        this.jumpCooldown = false;
        this.jumpInProgress = false;
        this.isOnPlatform = true;
        this.justLanded = false;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.totalJumps = 0;
        this.stats.jumpHistory = [];
        this.stats.velocityHistory = [];
        this.stats.lastCollisionTime = 0;
        this.stats.consecutiveJumps = 0;
        
        console.log(`‚úÖ Player reset complete at (${Math.round(this.x)}, ${Math.round(this.y)})`);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ - –° –ó–ê–©–ò–¢–û–ô
    update(deltaTime) {
        // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CONFIG
        if (typeof CONFIG === 'undefined') {
            return true; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ CONFIG –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const previousVelocityY = this.velocityY;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        if (!this.isOnPlatform && !this.justLanded) {
            this.velocityY += CONFIG.PLAYER.GRAVITY;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–∞–¥–µ–Ω–∏—è
        if (this.velocityY > CONFIG.PLAYER.MAX_FALL_SPEED) {
            this.velocityY = CONFIG.PLAYER.MAX_FALL_SPEED;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
        this.handleMovement(deltaTime);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ Y
        this.y += this.velocityY;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞ (—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è)
        this.handleScreenBounds();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.updateDirection();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º isOnPlatform –µ—Å–ª–∏ –ø–∞–¥–∞–µ–º
        if (this.velocityY > 0.5) {
            this.isOnPlatform = false;
            this.justLanded = false;
        }
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä—ã–∂–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–∞–¥–∞–µ—Ç –∏–ª–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        if ((this.velocityY > 0.5 || this.isOnPlatform) && !this.justLanded) {
            this.canJump = true;
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å jumpInProgress
        if (this.jumpInProgress && this.velocityY > 0) {
            this.jumpInProgress = false;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º landingCooldown —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        if (this.justLanded) {
            setTimeout(() => {
                this.justLanded = false;
            }, 50);
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (Math.abs(this.velocityY) > 12 && window.LOG_VELOCITY) {
            console.warn(`üö® HIGH VELOCITY: ${this.velocityY.toFixed(2)} (was ${previousVelocityY.toFixed(2)})`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (window.DEBUG_MODE) {
            this.stats.velocityHistory.push({
                time: Date.now(),
                velocityY: this.velocityY,
                y: this.y,
                isOnPlatform: this.isOnPlatform,
                jumpCount: this.jumpCount,
                canJump: this.canJump
            });
            
            // –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
            if (this.stats.velocityHistory.length > 50) {
                this.stats.velocityHistory.shift();
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
        const canvasHeight = CONFIG?.CANVAS?.HEIGHT || 600;
        if (this.y > canvasHeight + 100) {
            console.log('üíÄ Player fell off screen');
            return false;
        }
        
        return true;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è - –° –ó–ê–©–ò–¢–û–ô
    handleMovement(deltaTime) {
        // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CONFIG
        if (typeof CONFIG === 'undefined') return;
        
        if (this.targetX !== null) {
            // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            const diff = this.targetX - this.x;
            this.velocityX = diff * 0.15;
            
            if (Math.abs(this.velocityX) > CONFIG.PLAYER.MAX_SPEED) {
                this.velocityX = Math.sign(this.velocityX) * CONFIG.PLAYER.MAX_SPEED;
            }
        } else {
            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ)
            if (this.input.left) {
                this.velocityX = Math.max(
                    this.velocityX - CONFIG.PLAYER.ACCELERATION, 
                    -CONFIG.PLAYER.MAX_SPEED
                );
            } else if (this.input.right) {
                this.velocityX = Math.min(
                    this.velocityX + CONFIG.PLAYER.ACCELERATION, 
                    CONFIG.PLAYER.MAX_SPEED
                );
            } else {
                this.velocityX *= CONFIG.PLAYER.FRICTION;
                if (Math.abs(this.velocityX) < 0.1) this.velocityX = 0;
            }
        }
        
        this.x += this.velocityX;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞ - –° –ó–ê–©–ò–¢–û–ô
    handleScreenBounds() {
        // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CONFIG
        if (typeof CONFIG === 'undefined') return;
        
        const canvasWidth = CONFIG.CANVAS.WIDTH;
        
        if (this.x < -this.width) {
            this.x = canvasWidth;
            if (this.targetX !== null) this.targetX = this.x;
        } else if (this.x > canvasWidth) {
            this.x = -this.width;
            if (this.targetX !== null) this.targetX = this.x;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    updateDirection() {
        if (this.velocityX < -0.1) {
            this.lastDirection = 'left';
        } else if (this.velocityX > 0.1) {
            this.lastDirection = 'right';
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ - –° –ó–ê–©–ò–¢–û–ô
    draw(ctx, assets) {
        // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!ctx) {
            console.error('‚ùå Canvas context is not available in player.draw');
            return;
        }
        
        try {
            const image = assets ? assets.getImage('player') : null;
            
            if (image) {
                // –û—Ç—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –¥–≤–∏–∂–µ—Ç—Å—è –≤–ª–µ–≤–æ
                if (this.lastDirection === 'left') {
                    ctx.save();
                    ctx.scale(-1, 1);
                    ctx.drawImage(image, -this.x - this.width, this.y, this.width, this.height);
                    ctx.restore();
                } else {
                    ctx.drawImage(image, this.x, this.y, this.width, this.height);
                }
            } else {
                // Fallback –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
                this.drawFallback(ctx);
            }
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (window.DEBUG_MODE) {
                this.drawDebugInfo(ctx);
            }
        } catch (drawError) {
            console.error('‚ùå Error in player.draw:', drawError);
            // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.drawEmergency(ctx);
        }
    }

    // Fallback –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    drawFallback(ctx) {
        const centerX = this.x + this.width / 2;
        const centerY = this.y + this.height / 2;
        const radius = this.width / 2 - 2;
        
        // –¢–µ–Ω—å
        ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
        ctx.beginPath();
        ctx.arc(centerX + 2, centerY + 2, radius, 0, Math.PI * 2);
        ctx.fill();
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ
        ctx.fillStyle = '#FF6B6B';
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
        ctx.fill();
        
        // –î–µ—Ç–∞–ª–∏ –ª–∏—Ü–∞
        this.drawFace(ctx, centerX, centerY);
    }

    // –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–∞
    drawFace(ctx, centerX, centerY) {
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≥–ª–∞–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const eyeOffset = this.lastDirection === 'left' ? -1 : 1;
        
        // –ì–ª–∞–∑–∞
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(centerX - 8 * eyeOffset, centerY - 5, 5, 0, Math.PI * 2);
        ctx.arc(centerX + 8 * eyeOffset, centerY - 5, 5, 0, Math.PI * 2);
        ctx.fill();
        
        // –ó—Ä–∞—á–∫–∏
        ctx.fillStyle = '#2C3E50';
        ctx.beginPath();
        ctx.arc(centerX - 8 * eyeOffset, centerY - 5, 2.5, 0, Math.PI * 2);
        ctx.arc(centerX + 8 * eyeOffset, centerY - 5, 2.5, 0, Math.PI * 2);
        ctx.fill();
        
        // –£–ª—ã–±–∫–∞
        ctx.strokeStyle = '#2C3E50';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(centerX, centerY + 5, 7, 0.2 * Math.PI, 0.8 * Math.PI);
        ctx.stroke();
    }

    // –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    drawEmergency(ctx) {
        // –ü—Ä–æ—Å—Ç–∞—è –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
        ctx.fillStyle = '#FF0000';
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        ctx.fillStyle = '#FFFFFF';
        ctx.font = '12px Arial';
        ctx.fillText('PLAYER', this.x, this.y - 5);
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    drawDebugInfo(ctx) {
        ctx.fillStyle = 'red';
        ctx.font = '10px Arial';
        ctx.fillText(`X: ${Math.round(this.x)}`, this.x, this.y - 10);
        ctx.fillText(`Y: ${Math.round(this.y)}`, this.x, this.y - 22);
        ctx.fillText(`VX: ${this.velocityX.toFixed(1)}`, this.x, this.y - 34);
        ctx.fillText(`VY: ${this.velocityY.toFixed(1)}`, this.x, this.y - 46);
        ctx.fillText(`OnPlatform: ${this.isOnPlatform}`, this.x, this.y - 58);
        ctx.fillText(`CanJump: ${this.canJump}`, this.x, this.y - 70);
        ctx.fillText(`Consecutive: ${this.stats.consecutiveJumps}`, this.x, this.y - 82);
    }

    // –ü—Ä—ã–∂–æ–∫ - –° –ó–ê–©–ò–¢–û–ô
    jump() {
        // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CONFIG
        if (typeof CONFIG === 'undefined') {
            console.error('‚ùå CONFIG not available during jump!');
            return false;
        }
        
        const currentTime = Date.now();
        
        // –û–°–ù–û–í–ù–´–ï –ü–†–û–í–ï–†–ö–ò
        if (this.jumpCooldown) {
            if (window.LOG_JUMP) console.log('üö´ Jump blocked: cooldown active');
            return false;
        }
        
        if (!this.canJump) {
            if (window.LOG_JUMP) console.log('üö´ Jump blocked: cannot jump now');
            return false;
        }
        
        const timeSinceLastJump = currentTime - this.lastJumpTime;
        if (timeSinceLastJump < CONFIG.GAME.JUMP_COOLDOWN) {
            if (window.LOG_JUMP) console.log(`üö´ Jump blocked: too fast (${timeSinceLastJump}ms < ${CONFIG.GAME.JUMP_COOLDOWN}ms)`);
            return false;
        }
        
        // –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –í–´–ü–û–õ–ù–Ø–ï–ú –ü–†–´–ñ–û–ö
        this.jumpInProgress = true;
        
        // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–õ–ê –ü–†–´–ñ–ö–ê
        this.velocityY = CONFIG.PLAYER.JUMP_FORCE;
        this.isJumping = true;
        this.isOnPlatform = false;
        this.justLanded = false;
        this.jumpCount++;
        this.lastJumpTime = currentTime;
        this.canJump = false;
        this.jumpCooldown = true;
        this.stats.totalJumps++;
        this.stats.consecutiveJumps++;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä—ã–∂–∫–æ–≤
        this.stats.jumpHistory.push({
            time: currentTime,
            velocityY: this.velocityY,
            jumpCount: this.jumpCount,
            sequence: this.stats.totalJumps,
            consecutive: this.stats.consecutiveJumps
        });
        
        // –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä—ã–∂–∫–æ–≤
        if (this.stats.jumpHistory.length > 10) {
            this.stats.jumpHistory.shift();
        }
        
        if (window.LOG_JUMP) {
            console.log(`ü¶ò JUMP #${this.stats.totalJumps}!`, {
                velocityY: this.velocityY,
                jumpCount: this.jumpCount,
                timeSinceLast: timeSinceLastJump + 'ms',
                consecutiveJumps: this.stats.consecutiveJumps
            });
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            this.jumpCooldown = false;
        }, 30);
        
        return true;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    onPlatformHit() {
        if (window.LOG_COLLISION) {
            console.log('üéØ Platform hit - resetting jump state');
        }
        
        // –°–ë–†–ê–°–´–í–ê–ï–ú –í–°–ï –°–û–°–¢–û–Ø–ù–ò–Ø
        this.isJumping = false;
        this.isOnPlatform = true;
        this.jumpCount = 0;
        this.canJump = true;
        this.velocityY = 0;
        this.justLanded = true;
        this.stats.consecutiveJumps = 0;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–ª–∏–∑–∏–∏
        this.stats.lastCollisionTime = Date.now();
        
        // –ö–æ—Ä–æ—Ç–∫–∏–π –∫—É–ª–¥–∞—É–Ω
        setTimeout(() => {
            this.justLanded = false;
        }, 50);
        
        if (window.LOG_COLLISION) {
            console.log('üîÑ Player state after platform hit:', {
                isOnPlatform: this.isOnPlatform,
                jumpCount: this.jumpCount,
                canJump: this.canJump,
                consecutiveJumps: this.stats.consecutiveJumps
            });
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    setInput(direction, active) {
        if (this.input.hasOwnProperty(direction)) {
            this.input[direction] = active;
        }
    }

    setTargetPosition(x) {
        this.targetX = x - this.width / 2;
    }

    clearTargetPosition() {
        this.targetX = null;
    }

    handleDeviceTilt(gamma) {
        const deadZone = 5;
        
        if (Math.abs(gamma) < deadZone) {
            this.input.left = false;
            this.input.right = false;
        } else if (gamma < -deadZone) {
            this.input.left = true;
            this.input.right = false;
        } else if (gamma > deadZone) {
            this.input.left = false;
            this.input.right = true;
        }
    }

    getCameraY() {
        return this.y;
    }

    resetJumps() {
        this.jumpCount = 0;
        this.canJump = true;
        this.jumpCooldown = false;
        this.jumpInProgress = false;
        this.isOnPlatform = true;
        this.stats.consecutiveJumps = 0;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    getDebugInfo() {
        return {
            position: { x: Math.round(this.x), y: Math.round(this.y) },
            velocity: { x: this.velocityX.toFixed(2), y: this.velocityY.toFixed(2) },
            state: {
                isJumping: this.isJumping,
                isOnPlatform: this.isOnPlatform,
                jumpCount: this.jumpCount,
                canJump: this.canJump,
                jumpCooldown: this.jumpCooldown,
                jumpInProgress: this.jumpInProgress,
                justLanded: this.justLanded
            },
            stats: {
                totalJumps: this.stats.totalJumps,
                lastJumpTime: this.lastJumpTime,
                lastCollisionTime: this.stats.lastCollisionTime,
                consecutiveJumps: this.stats.consecutiveJumps
            }
        };
    }
}

console.log('‚úÖ Player class defined');