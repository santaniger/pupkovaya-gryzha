// –ö–ª–∞—Å—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
console.log('üîß Loading Platform classes...');

class Platform {
    constructor(x, y, type = PlatformType.NORMAL) {
        this.x = x;
        this.y = y;
        this.width = CONFIG.PLATFORMS.WIDTH;
        this.height = CONFIG.PLATFORMS.HEIGHT;
        this.type = type;
        
        if (this.type === PlatformType.MOVING) {
            this.velocityX = (Math.random() - 0.5) * CONFIG.PLATFORMS.MOVE_SPEED;
            this.movingRange = 80 + Math.random() * 40;
            this.startX = x;
        }
        
        if (this.type === PlatformType.BREAKING) {
            this.breaking = false;
            this.breakProgress = 0;
            this.breakTimer = 0;
        }
        
        this.lastCollisionTime = 0;
        this.collisionCount = 0;
        
        console.log(`‚ûï Created ${type} platform at (${Math.round(x)}, ${Math.round(y)})`);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    update(deltaTime) {
        if (this.type === PlatformType.MOVING) {
            this.x += this.velocityX;
            
            if (Math.abs(this.x - this.startX) > this.movingRange) {
                this.velocityX *= -1;
            }
        }
        
        if (this.type === PlatformType.BREAKING && this.breaking) {
            this.breakTimer += deltaTime;
            this.breakProgress = this.breakTimer / CONFIG.PLATFORMS.BREAKING_TIME;
            
            if (this.breakProgress >= 1) {
                if (window.LOG_COLLISION) console.log('üí• Platform destroyed');
                return false;
            }
        }
        
        return true;
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    draw(ctx, assets) {
        const alpha = this.breaking ? 1 - this.breakProgress : 1;
        
        ctx.save();
        ctx.globalAlpha = alpha;
        
        // –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        let imageName;
        switch(this.type) {
            case PlatformType.BREAKING:
                imageName = 'platformBreaking';
                break;
            case PlatformType.MOVING:
                imageName = 'platformMoving';
                break;
            default:
                imageName = 'platformNormal';
        }
        
        const image = assets.getImage(imageName);
        
        if (image && image.complete && image.naturalWidth !== 0) {
            ctx.drawImage(image, this.x, this.y, this.width, this.height);
        } else {
            // Fallback –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
            this.drawFallback(ctx);
        }
        
        ctx.restore();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
        if (window.DEBUG_MODE) {
            this.drawDebug(ctx);
        }
    }

    // Fallback –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    drawFallback(ctx) {
        let color;
        switch(this.type) {
            case PlatformType.BREAKING:
                color = CONFIG.COLORS.PLATFORM_BREAKING;
                break;
            case PlatformType.MOVING:
                color = CONFIG.COLORS.PLATFORM_MOVING;
                break;
            default:
                color = CONFIG.COLORS.PLATFORM_NORMAL;
        }
        
        ctx.fillStyle = color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        ctx.strokeStyle = this.darkenColor(color, 20);
        ctx.lineWidth = 2;
        ctx.strokeRect(this.x, this.y, this.width, this.height);
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    drawDebug(ctx) {
        ctx.strokeStyle = this.breaking ? 'red' : 'green';
        ctx.lineWidth = 1;
        ctx.strokeRect(this.x, this.y, this.width, this.height);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–ª–ª–∏–∑–∏–∏
        const timeSinceCollision = Date.now() - this.lastCollisionTime;
        if (timeSinceCollision < 1000) {
            ctx.fillStyle = 'white';
            ctx.font = '8px Arial';
            ctx.fillText(`${this.collisionCount}`, this.x + 5, this.y + 12);
        }
    }

    // –ù–∞—á–∞–ª–æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    startBreaking() {
        if (this.type === PlatformType.BREAKING && !this.breaking) {
            this.breaking = true;
            this.breakTimer = 0;
            if (window.LOG_COLLISION) console.log('üü° Breaking platform activated');
            return true;
        }
        return false;
    }

    // platforms.js - –ó–ê–ú–ï–ù–ò–¢–¨ –º–µ—Ç–æ–¥ collidesWith
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–æ–º - –ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    collidesWith(player, currentTime) {
        // –û–°–ù–û–í–ù–´–ï –ü–†–û–í–ï–†–ö–ò
        const timeSinceCollision = currentTime - this.lastCollisionTime;
        if (timeSinceCollision < CONFIG.PLATFORMS.COLLISION_COOLDOWN) {
            return false;
        }
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ª–ª–∏–∑–∏–π —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä—ã–∂–∫–∞
        if (player.justLanded || player.jumpInProgress) {
            return false;
        }
        
        // –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –≠–§–§–ï–ö–¢–ò–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏
        const playerBottom = player.y + player.height;
        const playerRight = player.x + player.width;
        const platformTop = this.y;
        const platformBottom = this.y + this.height;
        
        // –û–°–ù–û–í–ù–´–ï –£–°–õ–û–í–ò–Ø –ö–û–õ–õ–ò–ó–ò–ò
        const isColliding = 
            playerRight > this.x + 3 && // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤
            player.x < this.x + this.width - 3 &&
            playerBottom >= platformTop - 2 && // –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å —Å–≤–µ—Ä—Ö—É
            playerBottom <= platformTop + 10 && // –ó–∞–ø–∞—Å —Å–Ω–∏–∑—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            player.velocityY >= 0 && // –ù–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç–æ—è–Ω–∏–µ)
            player.y < platformBottom; // –ò–≥—Ä–æ–∫ –≤—ã—à–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        
        if (!isColliding) {
            return false;
        }
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–≤–µ—Ä—Ö
        if (player.velocityY < -1) {
            return false;
        }
        
        // –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –ö–û–õ–õ–ò–ó–ò–Ø –ü–†–û–ò–°–•–û–î–ò–¢
        this.lastCollisionTime = currentTime;
        this.collisionCount++;
        
        if (window.LOG_COLLISION) {
            console.log(`üéØ COLLISION #${this.collisionCount} on ${this.type} platform`, {
                playerY: player.y.toFixed(1),
                playerBottom: playerBottom.toFixed(1),
                platformTop: platformTop.toFixed(1),
                velocityY: player.velocityY.toFixed(2),
                timeSinceLast: timeSinceCollision + 'ms'
            });
        }
        
        return true;
    }

    darkenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = Math.max(0, (num >> 16) - amt);
        const G = Math.max(0, (num >> 8 & 0x00FF) - amt);
        const B = Math.max(0, (num & 0x0000FF) - amt);
        return "#" + (0x1000000 + (R * 0x10000) + (G * 0x100) + B).toString(16).slice(1);
    }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º
class PlatformManager {
    constructor() {
        console.log('üîß Initializing PlatformManager');
        this.platforms = [];
        this.scrollY = 0;
        this.highestPoint = CONFIG.CANVAS.HEIGHT;
        this.totalPlatformsGenerated = 0;
        this.maxPlatforms = 50; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        this.generateInitialPlatforms();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    generateInitialPlatforms() {
        console.log('üèóÔ∏è Generating initial platforms');
        
        // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–¥ –∏–≥—Ä–æ–∫–æ–º - –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø
        const startPlatformX = CONFIG.CANVAS.WIDTH / 2 - CONFIG.PLATFORMS.WIDTH / 2;
        const startPlatformY = CONFIG.GAME.START_PLATFORM_Y;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞—è
        if (isNaN(startPlatformY) || startPlatformY === undefined) {
            console.error('‚ùå Invalid START_PLATFORM_Y in config:', startPlatformY);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ
            const fallbackY = CONFIG.CANVAS.HEIGHT - 100;
            console.log('üîÑ Using fallback platform Y:', fallbackY);
            
            this.platforms.push(new Platform(
                startPlatformX,
                fallbackY,
                PlatformType.NORMAL
            ));
        } else {
            this.platforms.push(new Platform(
                startPlatformX,
                startPlatformY,
                PlatformType.NORMAL
            ));
        }

        console.log(`üéØ Start platform at (${startPlatformX}, ${this.platforms[0].y})`);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º - –ë–û–õ–ï–ï –ü–õ–û–¢–ù–û–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï
        let currentY = this.platforms[0].y - 80; // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—à–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        
        for (let i = 0; i < CONFIG.PLATFORMS.START_COUNT - 1; i++) {
            if (this.platforms.length < this.maxPlatforms) {
                this.generatePlatform(currentY);
            }
            currentY -= this.getRandomGap();
        }
        
        this.updateHighestPoint();
        console.log(`‚úÖ Generated ${this.platforms.length} initial platforms`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        this.validatePlatforms();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–µ
    generatePlatform(y) {
        if (this.platforms.length >= this.maxPlatforms) {
            return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
        }
        
        const type = this.getRandomPlatformType();
        const x = this.getRandomPlatformX();
        
        this.platforms.push(new Platform(x, y, type));
        this.totalPlatformsGenerated++;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    getRandomPlatformType() {
        const rand = Math.random();
        let cumulative = 0;
        
        for (const [type, probability] of Object.entries(CONFIG.PLATFORM_PROBABILITIES)) {
            cumulative += probability;
            if (rand <= cumulative) {
                return type.toLowerCase();
            }
        }
        
        return PlatformType.NORMAL;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ X –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    getRandomPlatformX() {
        const padding = 20;
        return padding + Math.random() * (CONFIG.CANVAS.WIDTH - CONFIG.PLATFORMS.WIDTH - padding * 2);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    getRandomGap() {
        return CONFIG.PLATFORMS.MIN_GAP + 
               Math.random() * (CONFIG.PLATFORMS.MAX_GAP - CONFIG.PLATFORMS.MIN_GAP);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    update(playerY, deltaTime) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —É–¥–∞–ª—è–µ–º —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ
        const initialCount = this.platforms.length;
        this.platforms = this.platforms.filter(platform => {
            return platform.update(deltaTime);
        });
        
        const removedCount = initialCount - this.platforms.length;
        if (removedCount > 0 && window.LOG_COLLISION) {
            console.log(`üóëÔ∏è Removed ${removedCount} broken platforms`);
        }

        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.cleanupOldPlatforms(playerY);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å–≤–µ—Ä—Ö—É
        const highestPlatform = this.getHighestPlatform();
        if (highestPlatform && highestPlatform.y > CONFIG.PLATFORMS.MIN_GAP) {
            const targetY = highestPlatform.y - this.getRandomGap();
            if (Math.random() < CONFIG.GAME.PLATFORM_SPAWN_RATE && this.platforms.length < this.maxPlatforms) {
                this.generatePlatform(targetY);
            }
        }

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –º–∏—Ä–∞ –≤–Ω–∏–∑ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è
        let scrollAmount = 0;
        if (playerY < CONFIG.GAME.INITIAL_SCROLL_THRESHOLD) {
            scrollAmount = CONFIG.GAME.INITIAL_SCROLL_THRESHOLD - playerY;
            this.scrollY += scrollAmount;
            
            this.platforms.forEach(platform => {
                platform.y += scrollAmount;
            });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–∫–∏
        this.updateHighestPoint();
        
        return scrollAmount;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    cleanupOldPlatforms(playerY) {
        const cleanupThreshold = 300; // –ü–∏–∫—Å–µ–ª–µ–π –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        const initialCount = this.platforms.length;
        this.platforms = this.platforms.filter(platform => {
            // –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–∞–ª–µ–∫–æ –ø–æ–¥ –∏–≥—Ä–æ–∫–æ–º
            return platform.y < playerY + CONFIG.CANVAS.HEIGHT + cleanupThreshold;
        });
        
        const removed = initialCount - this.platforms.length;
        if (removed > 0 && window.LOG_COLLISION) {
            console.log(`üóëÔ∏è Cleaned up ${removed} old platforms`);
        }
        
        return removed;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    getHighestPlatform() {
        if (this.platforms.length === 0) return null;
        return this.platforms.reduce((lowest, platform) => 
            platform.y < lowest.y ? platform : lowest
        );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    getStartPlatform() {
        if (this.platforms.length === 0) {
            return null;
        }
        
        // –ò—â–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–π–æ–Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const targetY = CONFIG.GAME.START_PLATFORM_Y || CONFIG.CANVAS.HEIGHT - 100;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const sortedPlatforms = [...this.platforms].sort((a, b) => {
            const diffA = Math.abs(a.y - targetY);
            const diffB = Math.abs(b.y - targetY);
            return diffA - diffB;
        });
        
        // –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        const closestPlatform = sortedPlatforms[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–Ω–∞ –±–ª–∏–∑–∫–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 50 –ø–∏–∫—Å–µ–ª–µ–π)
        if (Math.abs(closestPlatform.y - targetY) <= 50) {
            return closestPlatform;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–∏–∑–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é
        console.warn('‚ö†Ô∏è No platform found near start position, using first platform');
        return this.platforms[0];
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–π —Ç–æ—á–∫–∏
    updateHighestPoint() {
        const highestPlatform = this.getHighestPlatform();
        if (highestPlatform) {
            this.highestPoint = Math.min(this.highestPoint, highestPlatform.y);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
    validatePlatforms() {
        let validCount = 0;
        let invalidCount = 0;
        
        this.platforms.forEach((platform, index) => {
            if (isNaN(platform.x) || isNaN(platform.y)) {
                console.error(`‚ùå Invalid platform ${index}: x=${platform.x}, y=${platform.y}`);
                invalidCount++;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if (isNaN(platform.y)) {
                    platform.y = CONFIG.CANVAS.HEIGHT - 100 - (index * 100);
                    console.log(`üîÑ Fixed platform ${index} Y position: ${platform.y}`);
                }
            } else {
                validCount++;
            }
        });
        
        if (invalidCount > 0) {
            console.warn(`‚ö†Ô∏è Found ${invalidCount} invalid platforms, ${validCount} valid`);
        } else {
            console.log(`‚úÖ All ${validCount} platforms are valid`);
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    draw(ctx, assets) {
        this.platforms.forEach(platform => {
            platform.draw(ctx, assets);
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
    checkCollisions(player, currentTime) {
        let collisionOccurred = false;
        let collisionPlatform = null;
        
        for (const platform of this.platforms) {
            if (platform.collidesWith(player, currentTime)) {
                collisionOccurred = true;
                collisionPlatform = platform;
                break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∫–æ–ª–ª–∏–∑–∏–∏
            }
        }
        
        if (collisionOccurred && collisionPlatform) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –ª–æ–º–∞—é—â–∞—è—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            if (collisionPlatform.type === PlatformType.BREAKING) {
                collisionPlatform.startBreaking();
            }
        }
        
        return collisionOccurred;
    }

    // –°–±—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    reset() {
        console.log('üîÑ Resetting PlatformManager');
        this.platforms = [];
        this.scrollY = 0;
        this.highestPoint = CONFIG.CANVAS.HEIGHT;
        this.totalPlatformsGenerated = 0;
        this.generateInitialPlatforms();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤—ã—Å–æ—Ç—ã)
    getProgress() {
        return Math.max(0, CONFIG.CANVAS.HEIGHT - this.highestPoint);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    getDebugInfo() {
        const startPlatform = this.getStartPlatform();
        return {
            totalPlatforms: this.platforms.length,
            platformsGenerated: this.totalPlatformsGenerated,
            highestPoint: Math.round(this.highestPoint),
            scrollY: Math.round(this.scrollY),
            startPlatform: startPlatform ? {
                x: Math.round(startPlatform.x),
                y: Math.round(startPlatform.y)
            } : 'Not found'
        };
    }
}

console.log('‚úÖ Platform classes defined');