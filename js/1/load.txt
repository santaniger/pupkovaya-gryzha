// –§–∞–π–ª –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ä—è–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
console.log('Starting game load sequence...');

const scripts = [
    'js/config.js',
    'js/assets.js', 
    'js/platforms.js',
    'js/player.js',
    'js/game.js',
    'js/telegram.js'
];

let loadedCount = 0;

function loadScript(src) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = src;
        script.onload = () => {
            loadedCount++;
            console.log(`‚úÖ Loaded: ${src} (${loadedCount}/${scripts.length})`);
            resolve();
        };
        script.onerror = (error) => {
            console.error(`‚ùå Failed to load: ${src}`, error);
            reject(error);
        };
        document.head.appendChild(script);
    });
}

async function loadAllScripts() {
    try {
        console.log('üöÄ Starting script loading...');
        
        for (const script of scripts) {
            await loadScript(script);
        }
        
        console.log('üéâ All scripts loaded successfully!');
        return true;
    } catch (error) {
        console.error('üí• Error loading scripts:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const loadingText = document.getElementById('loadingText');
        if (loadingText) {
            loadingText.textContent = 'Error loading game. Please refresh the page.';
            loadingText.style.color = '#e74c3c';
        }
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadAllScripts);
} else {
    loadAllScripts();
}